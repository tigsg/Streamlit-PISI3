#An√°lise explorat√≥ria dos resultados da clusteriza√ß√£o
#Importando bibliotecas
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from datetime import datetime

# Fun√ß√£o para carregar os dados
def carregar_dados(filepath):
    return pd.read_parquet(filepath)

#Carregando dados
dataset = pd.read_parquet("data/df_com_clusters_atualizados.parquet")

#Explorando os clusters provenientes do KModes (clusteriza√ß√£o dos dados categ√≥ricos)
cores_cinema = ["#1B1B1B", "#D90429", "#FFD700", "#FFAA33", "#A2A2A2", 
                "#001F3F", "#8B4513", "#F5C518", "#5A5A5A", "#B22222"]

cluster0kmodes = dataset[dataset['cluster_kmodes'] == 0]
cluster1kmodes = dataset[dataset['cluster_kmodes'] == 1]
cluster2kmodes = dataset[dataset['cluster_kmodes'] == 2]
cluster3kmodes = dataset[dataset['cluster_kmodes'] == 3]

# Dicion√°rio de tradu√ß√£o
traducao = {
    'genres': 'G√™neros',
    'spoken_languages': 'L√≠nguas Faladas',
    'production_countries': 'Pa√≠ses de Produ√ß√£o'
}

def grafico_barras(cluster, data, coluna, qtd):
    contagem = data.groupby(coluna).size()
    top_10_contagem = contagem.nlargest(qtd)
    top_10_contagem = top_10_contagem.sort_values(ascending=True)
    
    coluna_traduzida = traducao.get(coluna, coluna)  # Traduz a coluna se houver tradu√ß√£o dispon√≠vel
    
    fig = px.bar(top_10_contagem, x=top_10_contagem.values, y=top_10_contagem.index, 
                 title=f"{coluna_traduzida} mais presentes no cluster {cluster}", 
                 labels={"x": "Contagem", coluna: coluna_traduzida})
    fig.update_traces(marker=dict(color=cores_cinema))
    return fig

#Compara√ß√£o de exist√™ncia de lucro
def contar_lucro (df):
    return (df['revenue'] > df['budget']).sum() / ((df['revenue'] > df['budget']).sum() + (df['revenue'] < df['budget']).sum())

#Quantidades de filmes que lucraram por cluster
lucrou0 = contar_lucro(cluster0kmodes)
lucrou1 = contar_lucro(cluster1kmodes)
lucrou2 = contar_lucro(cluster2kmodes)
lucrou3 = contar_lucro(cluster3kmodes)

#Explorando os clusters provenientes do KMeans (clusteriza√ß√£o dos dados num√©ricos)
cluster0kmeans = dataset[dataset['cluster_kmeans'] == 0]
cluster1kmeans = dataset[dataset['cluster_kmeans'] == 1]

#Porcentagem de filmes que lucraram por cluster
lucrou0kmeans = contar_lucro(cluster0kmeans)
lucrou1kmeans = contar_lucro(cluster1kmeans)

#Porcentagem de lucro nas regi√µes do heatmap
contagem_lucro_regioes = dataset.groupby(['cluster_kmodes', 'cluster_kmeans'], group_keys=False).apply(contar_lucro, include_groups=False).reset_index(name='porcentagem_lucro')

#Definindo fun√ß√µes
#Retorna a d√©cada em que o filme foi lan√ßado
def get_decada(idade):
    ano_atual = datetime.now().year
    ano_do_filme = ano_atual - idade
    decada = (ano_do_filme // 10) * 10
    return f"{decada}s"

#Retorna um dicion√°rio com d√©cadas sendo suas chaves e a lucratividade total que um cluster obteve naquela d√©cada como seus valores
def coletar_lucro_medio_decada(dataset, filmes_decada, cluster):
    lucro_total = {decada: 0 for decada in filmes_decada}
    contagem_filmes = {decada: 0 for decada in filmes_decada}
    for _, row in dataset.iterrows():
        decada_filme = get_decada(row['idade'])
        lucro = row['lucro']
        if decada_filme in filmes_decada:
            lucro_total[decada_filme] += lucro
            contagem_filmes[decada_filme] += 1
    for decada in filmes_decada:
        if contagem_filmes[decada] > 0:
            filmes_decada[decada][cluster] = lucro_total[decada] / contagem_filmes[decada]
        else:
            filmes_decada[decada][cluster] = 0 
    
    return filmes_decada

#Plota um gr√°fico de barras que mostra o lucro m√©dio de um cluster atrav√©s das d√©cadas
def plotar_lucro_decada(filmes_decada, cluster):
    df = pd.DataFrame([(decada, valores[str(cluster)]) for decada, valores in filmes_decada.items()],
                      columns=['D√©cada', 'Lucro M√©dio'])
    df = df.sort_values(by='D√©cada')
    fig = px.bar(df, x='D√©cada', y='Lucro M√©dio', 
                 title=f'Lucro M√©dio do Cluster {cluster} por D√©cada',
                 labels={'Lucro M√©dio': f'Lucro M√©dio do Cluster {cluster}', 'D√©cada': 'D√©cada'},
                 text_auto=True)
    fig.update_traces(marker=dict(color=cores_cinema)) 
    return fig

#Plota um gr√°fico com a maior lucratividade m√©dia por d√©cada, informando de qual cluster veio essa lucratividade
def plotar_maior_lucro_decada(filmes_decada):
    cluster_nomes = {
        '0': '0',
        '1': '1',
        '2': '2',
        '3': '3'
    }
    dados = []
    for decada, clusters in filmes_decada.items():
        max_cluster = max(clusters, key=clusters.get)  
        max_lucro = clusters[max_cluster]  
        dados.append((decada, max_lucro, cluster_nomes[max_cluster]))
    
    df = pd.DataFrame(dados, columns=['D√©cada', 'Lucro M√°ximo', 'Cluster'])
    df = df.sort_values(by='D√©cada')

    # Criando uma nova coluna para exibir no eixo X com quebra de linha
    df["D√©cada_Cluster"] = df["D√©cada"].astype(str) + "<br>" + df["Cluster"]

    fig = px.bar(df, x='D√©cada_Cluster', y='Lucro M√°ximo', text_auto=True,
                 title='Maior Lucratividade por D√©cada e Cluster',
                 labels={'Lucro M√°ximo': 'Maior Lucro na D√©cada', 'D√©cada_Cluster': 'D√©cada e Cluster'},
                 hover_data=['Cluster'])

    fig.update_traces(marker=dict(color=cores_cinema)) 

    # Evita inclina√ß√£o dos r√≥tulos
    fig.update_layout(xaxis_tickangle=0)

    return fig

#Criando o dicion√°rio que guardar√° a lucratividade por cluster em cada √©poca
filmes_decada = {'1910s': {'0': 0, '1': 0, '2': 0, '3': 0},'1920s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1930s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1940s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1950s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1960s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1970s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1980s': {'0': 0, '1': 0, '2': 0, '3': 0}, '1990s': {'0': 0, '1': 0, '2': 0, '3': 0}, '2000s': {'0': 0, '1': 0, '2': 0, '3': 0}, '2010s': {'0': 0, '1': 0, '2': 0, '3': 0}, '2020s': {'0': 0, '1': 0, '2': 0, '3': 0}}

# T√≠tulo da aplica√ß√£o
st.title("Visualiza√ß√£o da Clusteriza√ß√£o üëÄ")

tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["Escolha dos Clusters", "Clusters KModes", "Clusters KMeans", "Lucro KModes", "Lucro KMeans", "Heatmap e Lucro"])

with tab1:
    st.header("üéØ Escolha dos Clusters")
    st.write("A clusteriza√ß√£o √© uma t√©cnica de aprendizado n√£o supervisionado que tem como objetivo dividir um conjunto de dados em grupos de acordo com suas caracter√≠sticas. Neste projeto, utilizamos dois algoritmos de clusteriza√ß√£o: KModes e KMeans. O KModes √© um algoritmo que agrupa por dados categ√≥ricos, enquanto o KMeans agrupa por dados num√©ricos.")
    
    st.subheader("Elbow Method (KMeans)")
    st.image("imagens\Elbow Method KModes.png")
    st.write("O Elbow Method √© um m√©todo utilizado para encontrar o n√∫mero ideal de clusters em um conjunto de dados. O m√©todo consiste em plotar o valor da fun√ß√£o objetivo (no caso, a soma dos quadrados das dist√¢ncias dos pontos ao centr√≥ide) em fun√ß√£o do n√∫mero de clusters. O ponto de inflex√£o do gr√°fico √© o n√∫mero ideal de clusters. No caso, 4.")

    st.subheader("Silhueta (KMeans)")
    st.image("imagens\Silhueta Kmeans.png")
    st.text("O m√©todo da silhueta √© uma t√©cnica de valida√ß√£o interna para medir a qualidade de um agrupamento. A t√©cnica fornece uma maneira de avaliar a coer√™ncia interna de um agrupamento, ou seja, a dist√¢ncia m√©dia entre os pontos de um cluster e a dist√¢ncia m√©dia entre os pontos de clusters vizinhos.")

    st.subheader("Elbow Method (KModes)")
    st.image("imagens\Elbow Method KMeans.png")
    st.text("O Elbow Method √© um m√©todo utilizado para encontrar o n√∫mero ideal de clusters em um conjunto de dados. O m√©todo consiste em plotar o valor da fun√ß√£o objetivo (no caso, a soma dos quadrados das dist√¢ncias dos pontos ao centr√≥ide) em fun√ß√£o do n√∫mero de clusters. O ponto de inflex√£o do gr√°fico √© o n√∫mero ideal de clusters. No caso, 2.")

with tab2:
    st.header("üîç Entendendo os Clusters KModes")
    st.write("O algoritmo KModes √© um algoritmo de clusteriza√ß√£o que agrupa baseando-se em dados categ√≥ricos. Neste projeto, utilizamos o KModes para agrupar os filmes de acordo com seus g√™neros, l√≠nguas faladas e pa√≠ses de produ√ß√£o. Abaixo, voc√™ pode visualizar os clusters gerados pelo KModes e as caracter√≠sticas de cada um deles.")
    cluster_selecionado = st.selectbox("Selecione o Cluster", ["0", "1", "2", "3"])
    if cluster_selecionado == "0":
        #G√™neros mais presentes no cluster 0
        st.subheader("G√™neros üé¨")
        fig = grafico_barras('0', cluster0kmodes, 'genres', 5)
        st.plotly_chart(fig)
        st.text("O algoritmo KModes selecionou para o cluster 0 filmes de com√©dia e seus subg√™neros.")
        #L√≠nguas mais faladas no cluster 0
        st.subheader("L√≠nguas Faladas üó£Ô∏è")
        fig = grafico_barras('0', cluster0kmodes, 'spoken_languages', 8)
        st.plotly_chart(fig)
        st.text("O ingl√™s √© a l√≠ngua mais falada no cluster, as outras seguem equilibradas.")
        #P√°ises mais presentes no cluster 0
        st.subheader("Pa√≠ses de Produ√ß√£o üåç")
        fig = grafico_barras('0', cluster0kmodes, 'production_countries', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes presentes no cluster possuem o pa√≠s Estados Unidos da Am√©rica em suas produ√ß√µes.")
    elif cluster_selecionado == "1":
        #G√™neros mais presentes no cluster 1
        st.subheader("G√™neros üé¨")
        fig = grafico_barras('1', cluster1kmodes, 'genres', 5)
        st.plotly_chart(fig)
        st.text("O algoritmo KModes selecionou para o cluster 1 filmes de a√ß√£o e seus subg√™neros.")
        #L√≠nguas mais faladas no cluster 1
        st.subheader("L√≠nguas Faladas üó£Ô∏è")
        fig = grafico_barras('1', cluster1kmodes, 'spoken_languages', 8)
        st.plotly_chart(fig)
        st.text("O ingl√™s √© a l√≠ngua mais falada no cluster, as outras seguem equilibradas.")
        #P√°ises mais presentes no cluster 1
        st.subheader("Pa√≠ses de Produ√ß√£o üåç")
        fig = grafico_barras('1', cluster1kmodes, 'production_countries', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes presentes no cluster possuem o pa√≠s Estados Unidos da Am√©rica em suas produ√ß√µes.")
    elif cluster_selecionado == "2":
        st.subheader("G√™neros üé¨")
        #G√™neros mais presentes no cluster 2
        fig = grafico_barras('2', cluster2kmodes, 'genres', 5)
        st.plotly_chart(fig)
        st.text("O algoritmo KModes selecionou para o cluster 2 filmes de terror/suspense e seus subg√™neros.")
        #L√≠nguas mais faladas no cluster 2
        st.subheader("L√≠nguas Faladas üó£Ô∏è")
        fig = grafico_barras('2', cluster2kmodes, 'spoken_languages', 8)
        st.plotly_chart(fig)
        st.text("O ingl√™s √© a l√≠ngua mais falada no cluster, as outras seguem equilibradas.")
        #P√°ises mais presentes no cluster 2
        st.subheader("Pa√≠ses de Produ√ß√£o üåç")
        fig = grafico_barras('2', cluster2kmodes, 'production_countries', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes presentes no cluster possuem o pa√≠s Estados Unidos da Am√©rica em suas produ√ß√µes.")
    else:
        st.subheader("G√™neros üé¨")
        #G√™neros mais presentes no cluster 3
        fig = grafico_barras('3', cluster3kmodes, 'genres', 5)
        st.plotly_chart(fig)
        st.text("O algoritmo KModes selecionou para o cluster 3 filmes de drama e seus subg√™neros.")
        #L√≠nguas mais faladas no cluster 3
        st.subheader("L√≠nguas Faladas üó£Ô∏è")
        fig = grafico_barras('3', cluster3kmodes, 'spoken_languages', 8)
        st.plotly_chart(fig)
        st.text("O ingl√™s √© a l√≠ngua mais falada no cluster, as outras seguem equilibradas.")
        #P√°ises mais presentes no cluster 3
        st.subheader("Pa√≠ses de Produ√ß√£o üåç")
        fig = grafico_barras('3', cluster3kmodes, 'production_countries', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes presentes no cluster possuem o pa√≠s Estados Unidos da Am√©rica em suas produ√ß√µes.")

with tab3:
    st.header("üîç Entendendo os Clusters KMeans")
    st.text("O algoritmo KMeans √© um algoritmo de clusteriza√ß√£o que agrupa baseando-se em dados num√©ricos. Neste projeto, utilizamos o KMeans para agrupar os filmes de acordo com seus valores nas colunas num√©ricas 'Receita', 'Or√ßamento' e 'Dura√ß√£o' do dataset. Abaixo, voc√™ pode visualizar os clusters gerados pelo KMeans e as caracter√≠sticas de cada um deles.")
    cluster_selecionado = st.selectbox("Selecione o Cluster", ["0", "1"])
    if cluster_selecionado == "0":
        #G√™neros mais presentes no cluster 0
        st.subheader("G√™neros üé¨")
        fig = grafico_barras('0', cluster0kmeans, 'genres', 5)
        st.plotly_chart(fig)
        st.text("O cluster 0 gerado pelo KMeans √© o cluster que n√£o possui apenas filmes que foram altamente lucrativos, ent√£o podemos observar atrav√©s desse gr√°fico os g√™neros menos propensos a terem uma lucratividade extrema.")
        #L√≠nguas mais faladas no cluster 0
        st.subheader("L√≠nguas Faladas üó£Ô∏è")
        fig = grafico_barras('0', cluster0kmeans, 'spoken_languages', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes do cluster s√£o de l√≠ngua ingl√™sa.")
        #P√°ises mais presentes no cluster 0
        st.subheader("Pa√≠ses de Produ√ß√£o üåç")
        fig = grafico_barras('0', cluster0kmeans, 'production_countries', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes do cluster possuem os Estados Unidos da Am√©rica em sua produ√ß√£o.")
    else:
        #G√™neros mais presentes no cluster 1
        st.subheader("G√™neros üé¨")
        fig = grafico_barras('1', cluster1kmeans, 'genres', 5)
        st.plotly_chart(fig)
        st.text("O cluster 1 gerado pelo KMeans √© o cluster que possui filmes com as mais altas lucratividades, ent√£o podemos observar atrav√©s do gr√°ficos os g√™neros mais propensos a fazerem tanto sucesso.")
        #L√≠nguas mais faladas no cluster 1
        st.subheader("L√≠nguas Faladas üó£Ô∏è")
        fig = grafico_barras('1', cluster1kmeans, 'spoken_languages', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes do cluster s√£o de l√≠ngua ingl√™sa.")
        #P√°ises mais presentes no cluster 1
        st.subheader("Pa√≠ses de Produ√ß√£o üåç")
        fig = grafico_barras('1', cluster1kmeans, 'production_countries', 8)
        st.plotly_chart(fig)
        st.text("A maioria dos filmes do cluster possuem os Estados Unidos da Am√©rica em sua produ√ß√£o.")

with tab4:
    st.header("üí∏ Lucro KModes")
    st.text("Aqui, voc√™ pode visualizar a porcentagem de filmes que lucraram em cada cluster gerado pelo KModes.")
    st.text("Al√©m disso, √© poss√≠vel ver o lucro m√©dio dos clusters por d√©cada.")
    #Porcentagem de filmes que lucraram por cluster

    dic_lucrou = {'Cluster' : ['0', '1', '2', '3'], 'Quantidade' : [lucrou0, lucrou1, lucrou2, lucrou3]}

    fig = go.Figure(
        data=[go.Bar(
            x=dic_lucrou['Cluster'], 
            y=dic_lucrou['Quantidade'], 
            marker_color=cores_cinema
        )]
    )

    fig.update_layout(
        title="Porcentagem de Filmes que Lucraram por Cluster",
        xaxis_title="Clusters",
        yaxis_title="Quantidade de Filmes",
        yaxis=dict(range=[0, 1])
    )

    fig.update_traces(hovertemplate='%{y:.1%}')

    st.plotly_chart(fig)

    st.text("Podemos observar que essa √© a sequ√™ncia do cluster mais lucrativo pro menos: cluster 1 (a√ß√£o e subg√™neros), cluster 0 (com√©dia e subg√™neros), cluster 2 (terror/suspende e subg√™neros), cluster 3 (drama e subg√™neros).")

    # Sucesso do cluster 0 (cluster que possui filmes de com√©dia ou subg√™neros relacionados) atrav√©s das d√©cadas
    filmes_decada0 = coletar_lucro_medio_decada(cluster0kmodes, filmes_decada, '0')
    fig = plotar_lucro_decada(filmes_decada0, '0')
    st.plotly_chart(fig)
    st.text("A d√©cada em que o cluster 0 (com√©dia e subg√™neros) foi mais lucrativo foi na d√©cada de 2010.")

    # Sucesso do cluster 1 (cluster que possui filmes de a√ß√£o e subg√™neros relacionados) atrav√©s das d√©cadas
    filmes_decada1 = coletar_lucro_medio_decada(cluster1kmodes, filmes_decada, '1')
    fig = plotar_lucro_decada(filmes_decada1, '1')
    st.plotly_chart(fig)
    st.text("A d√©cada em que o cluster 1 (a√ß√£o e subg√™neros) foi mais lucrativo foi na d√©cada de 2010.")

    # Sucesso do cluster 2 (cluster que possui filmes de terror, suspense e subg√™neros relacionados) atrav√©s das d√©cadas
    filmes_decada2 = coletar_lucro_medio_decada(cluster2kmodes, filmes_decada, '2')
    fig = plotar_lucro_decada(filmes_decada2, '2')
    st.plotly_chart(fig)
    st.text("A d√©cada em que o cluster 2 (terror, suspense e subg√™neros) foi mais lucrativo foi na d√©cada de 1970.")

    # Sucesso do cluster 3 (cluster que possui filmes de drama e subg√™neros relacionados) atrav√©s das d√©cadas
    filmes_decada3 = coletar_lucro_medio_decada(cluster3kmodes, filmes_decada, '3')
    fig = plotar_lucro_decada(filmes_decada3, '3')
    st.plotly_chart(fig)
    st.text("A d√©cada em que o cluster 3 (drama e subg√™neros) foi mais lucrativo foi na d√©cada de 1990.")

    
    filmes_decada0 = coletar_lucro_medio_decada(cluster0kmodes, filmes_decada, '0')
    filmes_decada1 = coletar_lucro_medio_decada(cluster1kmodes, filmes_decada, '1')
    filmes_decada2 = coletar_lucro_medio_decada(cluster2kmodes, filmes_decada, '2')
    filmes_decada3 = coletar_lucro_medio_decada(cluster3kmodes, filmes_decada, '3')

    # Cluster mais lucrativo 
    fig = plotar_maior_lucro_decada(filmes_decada)
    st.plotly_chart(fig)
    st.text("Neste gr√°fico, podemos observar qual foi a maior lucratividade em cada d√©cada. Cada coluna representa o lucro m√©dio do cluster que mais lucrou, e embaixo da d√©cada √© poss√≠vel ver o n√∫mero do cluster em quest√£o.")


with tab5:
    st.header("üí∏ Lucro KMeans")
    st.text("Aqui, voc√™ pode visualizar a porcentagem de filmes que lucraram em cada cluster gerado pelo KMeans.")
    #Porcentagem de filmes que lucraram por cluster

    dic_lucrou = {'Cluster' : ['0', '1'], 'Quantidade' : [lucrou0kmeans, lucrou1kmeans]}

    fig = go.Figure(
        data=[go.Bar(
            x=dic_lucrou['Cluster'], 
            y=dic_lucrou['Quantidade'], 
            marker_color=cores_cinema
        )]
    )

    fig.update_layout(
        title="Porcentagem de Filmes que Lucraram por Cluster",
        xaxis_title="Clusters",
        yaxis_title="Quantidade de Filmes",
        yaxis=dict(range=[0, 1]),
    )

    fig.update_traces(hovertemplate='%{y:.1%}')

    st.plotly_chart(fig)

    st.text("Podemos observar a porcentagem de lucro extrema do cluster 1 (outliers) e, mesmo o cluster 0 n√£o possuindo outliers, podemos perceber")



with tab6:
    st.header("üî• Heatmap e Lucro")
    st.text("Aqui, voc√™ pode visualizar a rela√ß√£o entre os clusters categ√≥ricos e num√©ricos, al√©m da porcentagem de lucro por regi√£o no heatmap.")
    # Contando quantos registros pertencem a cada combina√ß√£o de clusters
    heatmap_data = dataset.groupby(['cluster_kmodes', 'cluster_kmeans']).size().reset_index(name='Contagem')

    colorscale_cinema = [
        [0.0, "#0D0D0D"],
        [0.2, "#383838"],
        [0.4, "#FFC300"],
        [0.6, "#E25822"],
        [0.8, "#8B0000"],
        [1.0, "#FF0000"]
    ]

    # Criando um heatmap para melhor observar a rela√ß√£o entre a clusteriza√ß√£o categ√≥rica e a num√©rica

    heatmap_data['cluster_kmodes'] = heatmap_data['cluster_kmodes'].astype(str)
    heatmap_data['cluster_kmeans'] = heatmap_data['cluster_kmeans'].astype(str)

    fig = go.Figure(data=go.Heatmap(
        z=heatmap_data['Contagem'],
        x=heatmap_data['cluster_kmeans'],
        y=heatmap_data['cluster_kmodes'],
        colorscale=colorscale_cinema,
        text=heatmap_data['Contagem'],
        texttemplate="%{text}",
        hovertemplate="Cluster Num√©rico: %{x}<br>Cluster Categ√≥rico: %{y}<br>Contagem: %{text}<extra></extra>"
    ))

    fig.update_layout(
        title="Heatmap da Rela√ß√£o entre Clusters Categ√≥ricos e Num√©ricos",
        xaxis_title="Clusters Num√©ricos",
        yaxis_title="Clusters Categ√≥ricos"
    )

    st.plotly_chart(fig)

    st.text("O Heatmap demonstra a rela√ß√£o na distribui√ß√£o dos registros entre os clusters categ√≥ricos e num√©ricos. Podemos observar, por exemplo, que a maioria dos filmes com lucratividade muito alta (filmes na posi√ß√£o 1 do eixo X) fazem parte do cluster 1 categ√≥rico (filmes de a√ß√£o e subg√™neros).")

    contagem_lucro_regioes['categoria'] = contagem_lucro_regioes['cluster_kmodes'].astype(str) + '-' + contagem_lucro_regioes['cluster_kmeans'].astype(str)

    fig = px.bar(
        contagem_lucro_regioes, 
        x='categoria', 
        y='porcentagem_lucro', 
        text='porcentagem_lucro',
        labels={'categoria': 'Regi√£o do Heatmap', 'porcentagem_lucro': 'Porcentagem de Lucro'},
        title='Porcentagem de Lucro por regi√£o no Heatmap',
        color = 'categoria',
        color_discrete_sequence = cores_cinema
    )

    fig.update_traces(texttemplate='%{text:.1%}', hovertemplate='%{y:.1%}')

    st.plotly_chart(fig)

    st.text("Podemos observar que as regi√µes que fazem parte do cluster 1 num√©rico possuem, em m√©dia, lucratividades extremamente altas (acima de 90%), devido ao algoritmo ter selecionado filmes que foram muito lucrativos para esse cluster. As outras regi√µes, embora n√£o t√£o altas, tamb√©m possuem boas porcentagens de lucro. Isso √© devido ao fato de estarmos trabalhando apenas com filmes que possu√≠ram um grande or√ßamento.")